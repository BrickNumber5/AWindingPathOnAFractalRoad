# ! Chapter 1

# " TODO: 
# " [x] Comments
# " [x] Chapter Titles
# " [x] Bold
# " [x] Italics
# " [x] Underline
# " [x] Strikethrough
# " [x] End of Page
# " [x] References
# " [x] Unconditional Jump
# " [x] Blanks (MC)
# " [x] Conditional Jump
# " [x] @END
# " [x] Escapes

This is example text including *bold*, /italics/, and other fancifully styled text. Styles can even be */nested/*

# ---

This is the second page.

# ---

Here on this page there is an unreadable blank where the user fills in: __@blank:"left","right"__. Its options are "left" and "right".

# -> @skip

Since this section is behind a jump that jumps past it, it is unreachable.

# @skip

The formatting options available also include _underlined_ text and ~crossed out~ text.

# ---

This page has two (2) "paragraphs" on it.

Here's the second one.

# ---

# ---

The previous page was blank.

# ---

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer vitae enim ante. Nunc convallis lorem dui, sed placerat purus facilisis vel. Nunc vitae metus non purus aliquam tincidunt. Maecenas semper, ante ut consequat porta, mi justo pulvinar odio, sed facilisis nunc neque ut ante. Sed at leo a orci feugiat fringilla. Cras ac libero cursus, dignissim felis at, accumsan orci. Sed ultrices ex sit amet sem finibus, sed sodales tortor cursus. Nulla interdum vulputate lorem at sagittis. Integer id enim fringilla, mollis dui accumsan, tincidunt diam.

This page has a whole, whole, whole bunch of text that doesn't actually finish on this page and therefore the text on the next page doesn't start with an indent because it is continuing on from this one. This is accomplished by replacing the triple dash page break

# ...

with a triple dot page break.

# ---

# ?-> @blank
  "left" -> @left
  "right" -> @right

# @left

You'll see this *bold* text if you chose left.

# -> @merge

# @right

You'll see this /italic/ text if you chose right.

# -> @merge

# @merge

(You'll see this text regardless)

# ---

This is a test that escape characters work: \\ \* \* \* \\

Text that looks like the above is accomplished by writing "\\\\ \\\* \\\* \\\* \\\\" in the markup.

# ---

This is a test of using multiple branches. Here filling in the following blanks will return the binary number represented.

\[__@bin0:"0","1"__, __@bin1:"0","1"__, __@bin2:"0","1"__, __@bin3:"0","1"__\]

# ?-> @bin0
  "0" -> @n0
  "1" -> @n1
  "" -> @nUnknown

# @n0

# ?-> @bin1
  "0" -> @n00
  "1" -> @n01
  "" -> @nUnknown

# @n1

# ?-> @bin1
  "0" -> @n10
  "1" -> @n11
  "" -> @nUnknown

# @n00

# ?-> @bin2
  "0" -> @n000
  "1" -> @n001
  "" -> @nUnknown

# @n01

# ?-> @bin2
  "0" -> @n010
  "1" -> @n011
  "" -> @nUnknown

# @n10

# ?-> @bin2
  "0" -> @n100
  "1" -> @n101
  "" -> @nUnknown

# @n11

# ?-> @bin2
  "0" -> @n110
  "1" -> @n111
  "" -> @nUnknown

# @n000

# ?-> @bin3
  "0" -> @n0000
  "1" -> @n0001
  "" -> @nUnknown

# @n001

# ?-> @bin3
  "0" -> @n0010
  "1" -> @n0011
  "" -> @nUnknown

# @n010

# ?-> @bin3
  "0" -> @n0100
  "1" -> @n0101
  "" -> @nUnknown

# @n011

# ?-> @bin3
  "0" -> @n0110
  "1" -> @n0111
  "" -> @nUnknown

# @n100

# ?-> @bin3
  "0" -> @n1000
  "1" -> @n1001
  "" -> @nUnknown

# @n101

# ?-> @bin3
  "0" -> @n1010
  "1" -> @n1011
  "" -> @nUnknown

# @n110

# ?-> @bin3
  "0" -> @n1100
  "1" -> @n1101
  "" -> @nUnknown

# @n111

# ?-> @bin3
  "0" -> @n1110
  "1" -> @n1111
  "" -> @nUnknown

# @n0000

(0)

# -> @merge2

# @n0001

(1)

# -> @merge2

# @n0010

(2)

# -> @merge2

# @n0011

(3)

# -> @merge2

# @n0100

(4)

# -> @merge2

# @n0101

(5)

# -> @merge2

# @n0110

(6)

# -> @merge2

# @n0111

(7)

# -> @merge2

# @n1000

(8)

# -> @merge2

# @n1001

(9)

# -> @merge2

# @n1010

(10)

# -> @merge2

# @n1011

(11)

# -> @merge2

# @n1100

(12)

# -> @merge2

# @n1101

(13)

# -> @merge2

# @n1110

(14)

# -> @merge2

# @n1111

(15)

# -> @merge2

# @nUnknown

(???)

# -> @merge2

# @merge2

# ---

This is a page containing a test short answer blank.

This __@shortanswer:15__ allows you to enter up to fifteen characters.

And this one >> __@shortanswer2:3__ << gives you three.

# ---

This is a test of the from stored element. It echoes a value from a blank.

Whatever you put in this blank: __@echotest:10__, will be echoed here: "[@echotest]"

# ---

This is a test of the exec javascript element. It allows arbitrary javascript to be exectuted and run.

{ console.log( "Hello!" ); }

The bit of javascript above just logs Hello to the console, it should produce no ouput and should leave no visible impact on the page. It should output hello to the console each time the page is rerendered, such as when an input changes.

This bit of javascript outputs a random number between one and ten: { return Math.floor( Math.random( ) * 10 + 1 ); }.

This bit of javascript outputs the current timestamp: { return new Date( ); }.

This bit of javascript outputs bold text: { return [ TOKEN.BOLD_START, "BOLD TEXT", TOKEN.BOLD_END ]; }.

The bit of javascript below outputs the number placed in this box: __@humannumber:15__ as the english word(s) for that number.

{
  function human( string ) {
    const singles = [ "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" ];
    if ( string === "" ) {
      return;
    } else {
      let n = +string;
      if ( Number.isInteger( n ) ) {
        let negative = false;
        if ( n < 0 ) {
          n = -n;
          negative = true;
        }
        n = Array.from( n.toString( ), x => +x ).reverse( );
        if ( n.length % 3 === 1 ) n.push( 0 );
        if ( n.length % 3 === 2 ) n.push( 0 );
        let m = [ ];
        for ( let i = 0; i < n.length; i += 3 ) {
          m.push( [ n[ i ], n[ i + 1 ], n[ i + 2 ], i / 3 ] );
        }
        m.reverse( );
        m = m.map( triple => {
          const [ ones, tens, hundreds, idx ] = triple;
          if ( ones === 0 && tens === 0 && hundreds === 0 ) return null;
          let str = "";
          if ( hundreds > 0 ) str += singles[ hundreds ] + " hundred ";
          if ( tens === 1 ) {
            str += [ "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" ][ ones ];
          } else {
            str += [ "", "ten ", "twenty ", "thirty ", "fourty ", "fifty ", "sixty ", "seventy ", "eighty ", "ninety " ][ tens ];
            if ( ones === 0 ) {
              str = str.substring( 0, str.length - 1 );
            } else {
              str += singles[ ones ];
            }
          }
          str += [ "", " thousand", " million", " billion", " trillion" ][ idx ];
          return ( negative ? "negative " : "" ) + str;
        } ).filter( x => x !== null );
        let str = m.join( " " );
        if ( str === "" ) str = "zero";
        return str;
      } else {
        return "not an integer";
      }
    }
  }
  return human( humannumber );
}

# ---

This is the final page.

# -> @END